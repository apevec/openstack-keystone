From c61067af8a31bc72d71ef1eb94d24316b19cbd86 Mon Sep 17 00:00:00 2001
From: Alan Pevec <apevec@redhat.com>
Date: Wed, 8 Jan 2014 18:52:09 +0100
Subject: [PATCH] improve systemd onready notification

* add unset_environment parameter
New parameter unset_environment was added to sd_notify
http://www.freedesktop.org/software/systemd/man/sd_notify.html
to ensure service readiness is sent only once.

* add onready() method to simulate systemd environment
For testing purposes and optional use with SysV initscripts.

Related: rhbz#1036515

Change-Id: I837ca8fed04780224d4cadcb535728b1b1d2adc5
---
 keystone/common/systemd.py | 63 ++++++++++++++++++++++++++++++++++++++--------
 1 file changed, 52 insertions(+), 11 deletions(-)

diff --git a/keystone/common/systemd.py b/keystone/common/systemd.py
index 52d7aff..9f1cdf5 100644
--- a/keystone/common/systemd.py
+++ b/keystone/common/systemd.py
@@ -15,29 +15,70 @@
 #    under the License.
 
 """
-Helper module for systemd start-up completion notification.
+Helper module for systemd service readiness notification.
 Used for "onready" configuration parameter in keystone.conf
 """
 
 import os
 import socket
+import sys
 
 
-def _sd_notify(msg):
-    sysd = os.getenv('NOTIFY_SOCKET')
-    if sysd:
+def _abstractify(socket_name):
+    if socket_name.startswith('@'):
+        # abstract namespace socket
+        socket_name = '\0%s' % socket_name[1:]
+    return socket_name
+
+def _sd_notify(unset_env, msg):
+    notify_socket = os.getenv('NOTIFY_SOCKET')
+    if notify_socket:
         sock = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)
-        if sysd.startswith('@'):
-            # abstract namespace socket
-            sysd = '\0%s' % sysd[1:]
-        sock.connect(sysd)
+        sock.connect(_abstractify(notify_socket))
         sock.sendall(msg)
         sock.close()
-
+        if unset_env:
+            del os.environ['NOTIFY_SOCKET']
 
 def notify():
-    _sd_notify('READY=1')
+    _sd_notify(0, 'READY=1')
+
+def notify_once():
+    _sd_notify(1, 'READY=1')
+
+def onready(notify_socket, timeout):
+    """Wait for systemd style notification on the socket.
+
+    :param notify_socket: local socket address
+    :type notify_socket:  string
+    :param timeout:       socket timeout
+    :type timeout:        float
+    :returns:             0 service ready
+                          1 service not ready
+                          2 timeout occured
+    """
+    sock = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)
+    sock.settimeout(timeout)
+    sock.bind(notify_socket)
+    try:
+        msg = sock.recv(512)
+        if msg.find('READY=1') == -1:
+            return 1
+    except socket.timeout:
+        return 2
+    finally:
+        sock.close()
+    return 0
 
 
 if __name__ == '__main__':
-    notify()
+    # simple CLI for testing
+    if len(sys.argv) == 1:
+        notify()
+    elif len(sys.argv) >= 2:
+        timeout = float(sys.argv[1])
+        notify_socket = os.getenv('NOTIFY_SOCKET')
+        if notify_socket:
+            notify_socket = _abstractify(notify_socket)
+            retval = onready(notify_socket, timeout)
+            sys.exit(retval)
