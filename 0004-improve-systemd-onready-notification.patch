From f35c4ac0d7fd87f92a350044277a061280e70e6a Mon Sep 17 00:00:00 2001
From: Alan Pevec <apevec@redhat.com>
Date: Wed, 8 Jan 2014 18:52:09 +0100
Subject: [PATCH] improve systemd onready notification

* add unset_environment parameter
New parameter unset_environment was added to sd_notify
http://www.freedesktop.org/software/systemd/man/sd_notify.html
to ensure service readiness is sent only once.

* add onready() method to simulate systemd environment
For testing purposes and optional use with SysV initscripts.

Resolves: rhbz#1058291

Upstream-Oslo: https://review.openstack.org/72683
Change-Id: I80f325c9be9c171c2dc8d5526570bf64f0f87c78
---
 keystone/common/systemd.py | 77 +++++++++++++++++++++++++++++++++++++---------
 1 file changed, 63 insertions(+), 14 deletions(-)

diff --git a/keystone/common/systemd.py b/keystone/common/systemd.py
index 52d7aff..e35a1d6 100644
--- a/keystone/common/systemd.py
+++ b/keystone/common/systemd.py
@@ -1,6 +1,6 @@
 # vim: tabstop=4 shiftwidth=4 softtabstop=4
 
-# Copyright 2012 Red Hat, Inc.
+# Copyright 2012-2014 Red Hat, Inc.
 #
 #    Licensed under the Apache License, Version 2.0 (the "License"); you may
 #    not use this file except in compliance with the License. You may obtain
@@ -15,29 +15,78 @@
 #    under the License.
 
 """
-Helper module for systemd start-up completion notification.
-Used for "onready" configuration parameter in keystone.conf
+Helper module for systemd service readiness notification.
 """
 
 import os
 import socket
+import sys
 
 
-def _sd_notify(msg):
-    sysd = os.getenv('NOTIFY_SOCKET')
-    if sysd:
+def _abstractify(socket_name):
+    if socket_name.startswith('@'):
+        # abstract namespace socket
+        socket_name = '\0%s' % socket_name[1:]
+    return socket_name
+
+
+def _sd_notify(unset_env, msg):
+    notify_socket = os.getenv('NOTIFY_SOCKET')
+    if notify_socket:
         sock = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)
-        if sysd.startswith('@'):
-            # abstract namespace socket
-            sysd = '\0%s' % sysd[1:]
-        sock.connect(sysd)
-        sock.sendall(msg)
-        sock.close()
+        try:
+            sock.connect(_abstractify(notify_socket))
+            sock.sendall(msg)
+            if unset_env:
+                del os.environ['NOTIFY_SOCKET']
+        except EnvironmentError:
+            # service notification is best effort
+            pass
+        finally:
+            sock.close()
 
 
 def notify():
-    _sd_notify('READY=1')
+    _sd_notify(False, 'READY=1')
+
+
+def notify_once():
+    _sd_notify(True, 'READY=1')
+
+
+def onready(notify_socket, timeout):
+    """Wait for systemd style notification on the socket.
+
+    :param notify_socket: local socket address
+    :type notify_socket:  string
+    :param timeout:       socket timeout
+    :type timeout:        float
+    :returns:             0 service ready
+                          1 service not ready
+                          2 timeout occured
+    """
+    sock = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)
+    sock.settimeout(timeout)
+    sock.bind(_abstractify(notify_socket))
+    try:
+        msg = sock.recv(512)
+    except socket.timeout:
+        return 2
+    finally:
+        sock.close()
+    if 'READY=1' in msg:
+        return 0
+    else:
+        return 1
 
 
 if __name__ == '__main__':
-    notify()
+    # simple CLI for testing
+    if len(sys.argv) == 1:
+        notify()
+    elif len(sys.argv) >= 2:
+        timeout = float(sys.argv[1])
+        notify_socket = os.getenv('NOTIFY_SOCKET')
+        if notify_socket:
+            retval = onready(notify_socket, timeout)
+            sys.exit(retval)
